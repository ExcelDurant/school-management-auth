import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import firebase from 'firebase/app';
import { AngularFirestore, AngularFirestoreCollection } from '@angular/fire/firestore';
import { Observable } from 'rxjs';
import { User } from '../interfaces/user';
import {Router} from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  user!: User;
  logged:boolean | undefined;
  private usersCollection: AngularFirestoreCollection<any>;


  constructor(public auth: AngularFireAuth, private afs: AngularFirestore, private router: Router) { 
    this.usersCollection = afs.collection<any>('users');
    this.auth.onAuthStateChanged((user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        this.getUser(user.uid);
        // ...
        this.logged = true;
        // saves the login status to the local storage
        sessionStorage.setItem('userA', JSON.stringify(this.user));
      } else {
        // User is signed out
        // ...
        this.logged = false;
        // this.user = undefined;
        sessionStorage.setItem('userA', JSON.stringify(this.user));
      }
    });
  }

  // gets the user information from the component and uses it to sign the user up
  emailSignup(firstName:string, lastName:string, phoneNumber:string, email:string, password:string) {
    this.auth.createUserWithEmailAndPassword(email, password)
  .then((userCredential) => {
    // Signed in 

    // passes user info to the function which has to store the user information to the firestore database
    this.setUserData(firstName, lastName, phoneNumber, userCredential.user)
    // ...
    // navigates to new users page where he will await verification
    this.router.navigate(['newUser']);
  })
  .catch((error) => {
    var errorCode = error.code;
    var errorMessage = error.message;
    // ..
  });
  }

  // google login fuction
  googleLogin() {
    this.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());
  }

  // logs out the user
  logout() {
    this.auth.signOut();
  }

  // sends the user information to firebase
  setUserData(firstName:string, lastName:string, phoneNumber:string, user:any) {
    // creates a variable that will hold user information before sending it to firestore
    const userData:User = {
      // gets the user id from the credential id generated by firebase
      uid:user.uid,
      email:user.email || null,
      firstName:firstName,
      lastName:lastName,
      // in case sign up with google displayname is simply displayname but is first name and last name if signup with email
      displayName:user.displayName || firstName + " " + lastName,
      phoneNumber:phoneNumber,
      photoURL: user.photoURL || null,
      role:{
        student:false,
        instructor:false,
        admin:false
      }
    }
    this.user = userData;
    // adds the user info to firestore storing into a document with reference as user id
    this.usersCollection.doc(userData.uid).set(userData);
  }

  // function to get a certain user's info from firestore
  getUser(id:any) {
    const userRef = this.usersCollection.doc(id);
    userRef.get().toPromise().then((doc) => {
      this.user = doc.data();
    })
  }
}
